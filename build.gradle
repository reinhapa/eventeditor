import java.text.SimpleDateFormat

plugins {
    id 'java'
    id 'signing'
    id 'application'
    id 'jacoco'
    id 'maven-publish'
    id 'com.github.ben-manes.versions' version '0.28.0'
    id 'com.google.osdetector' version '1.6.2'
    id 'net.nemerosa.versioning' version '2.12.1'
    id 'org.owasp.dependencycheck' version '5.3.1'
}

configurations {
    asciidoclet
    jmockit
    testCompile.extendsFrom jmockit
}

group = 'net.reini'
version = '1.0-SNAPSHOT'

description = "JavaFX editor for Hackergarten events event.json file"

sourceCompatibility = 12
targetCompatibility = 12

repositories {
    jcenter()
}

Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
    platform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os
}

dependencies {
    compile 'org.glassfish.jersey.core:jersey-client:2.30'
    compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.30'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.10.3'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.10.2'
    compile 'org.controlsfx:controlsfx:11.0.1'

    // javaFX
    compile "org.openjfx:javafx-base:12.+:$platform"
    compile "org.openjfx:javafx-graphics:12.+:$platform"
    compile "org.openjfx:javafx-fxml:12.+:$platform"
    compile "org.openjfx:javafx-controls:12.+:$platform"

    jmockit 'org.jmockit:jmockit:1.49'

    testCompile 'junit:junit:4.13'
}

task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

signing {
    required { project.hasProperty('signing.password') && !project.version.contains('-SNAPSHOT') }
    sign configurations.archives
}

mainClassName = 'io.hackergarten.eventeditor.EventEditor'

jar {
    manifest {
        attributes 'Implementation-Title': 'JavaFX editor for hackergarten events',
                   'Implementation-Version': version,
                   'Created-By': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString(),
                   'Build-Date': buildDate,
                   'Build-Time': buildTime,
                   'Build-Revision': versioning.info.commit,
                   'Specification-Title': project.name,
                   'Specification-Version': project.version,
                   'Specification-Vendor': 'reini.net'
        metaInf {
            from file('.')
            include 'LICENSE'
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

test {
  jvmArgumentProviders.add (
    { -> ["-javaagent:${configurations.jmockit.filter{ f -> f.getName().startsWith('jmockit')}.singleFile.absolutePath}"] } as CommandLineArgumentProvider
  )
}

dependencyUpdates.resolutionStrategy {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

check.dependsOn jacocoTestReport //, dependencyCheckUpdate, dependencyCheckAnalyze
